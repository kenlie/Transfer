{
  "_args": [
    [
      "eosjs@^8.0.1",
      "/home/k1/Documents/prog/EOS-backend/server"
    ]
  ],
  "_from": "eosjs@>=8.0.1 <9.0.0",
  "_id": "eosjs@8.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/eosjs",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/eosjs_8.0.1_1524591881180_0.8243685300302275"
  },
  "_npmUser": {
    "email": "jslim180@gmail.com",
    "name": "jamesc"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "eosjs",
    "raw": "eosjs@^8.0.1",
    "rawSpec": "^8.0.1",
    "scope": null,
    "spec": ">=8.0.1 <9.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/eosjs/-/eosjs-8.0.1.tgz",
  "_shasum": "4df55cdd6abc9ffbb58d1b8d5978107f047f1b02",
  "_shrinkwrap": null,
  "_spec": "eosjs@^8.0.1",
  "_where": "/home/k1/Documents/prog/EOS-backend/server",
  "author": "",
  "babel": {
    "plugins": [
      "syntax-async-functions",
      "transform-regenerator"
    ],
    "presets": [
      "es2015"
    ]
  },
  "bugs": {
    "url": "https://github.com/EOSIO/eosjs/issues"
  },
  "dependencies": {
    "babel-polyfill": "^6.26.0",
    "binaryen": "^37.0.0",
    "create-hash": "^1.1.3",
    "eosjs-api": "^4.0.3",
    "eosjs-ecc": "^3.0.2",
    "eosjs-json": "^4.0.2",
    "fcbuffer": "^2.1.5"
  },
  "description": "General purpose library for the EOS blockchain.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-plugin-syntax-async-functions": "^6.13.0",
    "babel-plugin-transform-regenerator": "^6.26.0",
    "babel-preset-es2015": "^6.24.1",
    "browserify": "^14.4.0",
    "coveralls": "^2.13.1",
    "eosjs-keygen": "^1.2.0",
    "jsdoc-to-markdown": "^3.0.4",
    "mocha": "^3.4.2",
    "nyc": "^11.4.1"
  },
  "directories": {},
  "dist": {
    "fileCount": 18,
    "integrity": "sha512-s/k+AkDi4H9An6se500REsrMN1Kv+eXQKXHJJ2Ua7RWMCUBWyLo7MxcJIP0kWrQsZ1N/tYNP6bry0M0xV+Cj/A==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa320KCRA9TVsSAnZWagAA8/IP/A6KRL6ZmUyN7UMlSjRb\nzVCgOSAvjQaCKvzDfYY0sGQs0PQbAdY+UEh5eXas5pYdcdfJcOVwZycSSPTm\n7Tt0xJhyXq6nOvddNEY8zycgd6qPIkSc65rhGgA2b38cDLVinzYHkbPdbaKX\nBJNo2h2slvniPf7qxAuww1lyEmjMhmKIlLh0kmkszKbUCrbxK+vKfOclujCE\n/dO15dipgAfxxCh2zMRjgc6PmlMFtWtuigcxoDGg7l2WyaTUX+0FssC+U39p\n0K9V++4kN9GD+f+Mn1itLeSnx91s/WzPA4Fae5xZsZ5JTUAFjlC8YvGTw6cq\nyv5bzxd1I8Ohxp5BLMsncPsYKrNqmTgAp9lhjlzUXrfvbQg4PHWUgScohLfY\npWduPhuD0yCMOLDT1b+PrDPVdn8Kao7OovL9mShJ+LA6pyQH5ax/ZgvKe4Co\ndHZwdF2yqxFDzeaKHDkkZroEccpdTfnqgVSbIJjnAuiq7/HU9ZGOLR5tJ0Gc\nbDo7e7hRkH3pju6wmRFupgSwGbTLVKofnlhZvY7XASyBx4MiEgAMeYeSeM9l\nCT6Bhga5MIbnMTWuLhxo7YvhbzJpDrzhccAOaqiRDvpz5vukQR16l6KGtpZV\nqQbLGxzYzGGuhWT7JfY+QrhIsbhbb007uODOOhVW+fmcPjn8gdK/pzwO7uyT\nrHD/\r\n=mtkw\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "4df55cdd6abc9ffbb58d1b8d5978107f047f1b02",
    "tarball": "https://registry.npmjs.org/eosjs/-/eosjs-8.0.1.tgz",
    "unpackedSize": 119409
  },
  "gitHead": "6cd2eaa6642d25aabf91d59070d2697996ee3868",
  "homepage": "https://github.com/EOSIO/eosjs#readme",
  "keywords": [
    "Blockchain",
    "EOS"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jamesc",
      "email": "jslim180@gmail.com"
    },
    {
      "name": "smetelin",
      "email": "serg.metelin@gmail.com"
    }
  ],
  "name": "eosjs",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/EOSIO/eosjs.svg?branch=master)](https://travis-ci.org/EOSIO/eosjs)\n[![NPM](https://img.shields.io/npm/v/eosjs.svg)](https://www.npmjs.org/package/eosjs)\n\n### The current release of eosjs is built for the last stable eos build Dawn 2.x\nYou can find the current stable branch of eos here: https://github.com/EOSIO/eos/tree/dawn-2.x\n\nA Dawn 3.x pre-release version of eosjs is available:\n`npm i eosjs@dawn3`\n\nYou can run the latest Dawn 3.x node from the default master branch at: http://github.com/eosio/eos\n\n| Version | [EOSIO/eosjs](/EOSIO/eosjs) | [Npm](https://www.npmjs.com/package/eosjs) | [EOSIO/eos](/EOSIO/eos) | [Docker](https://hub.docker.com/r/eosio/eos/) | Node |\n| --- | --- | --- | --- | --- | --- |\n| dawn3 | branch: master | `npm install eosjs@dawn3` | branch: master | eosio/eos:dawn3x | [local docker](https://github.com/EOSIO/eosjs/tree/master/docker) |\n| dawn2 | branch: dawn2 | `npm install eosjs` | branch: dawn-2.x | eosio/eos:dawn2x | http or [https://t1readonly.eos.io](https://t1readonly.eos.io/v1/chain/get_info) |\n\n# Eosjs\n\nGeneral purpose library for the EOS blockchain.\n\n### Usage (read-only)\n\n```javascript\nEos = require('eosjs') // Eos = require('./src')\n\n// eos = Eos.Localnet() // 127.0.0.1:8888\neos = Eos.Testnet() // testnet at eos.io\n\n// All API methods print help when called with no-arguments.\neos.getBlock()\n\n// Next, your going to need eosd running on localhost:8888\n\n// If a callback is not provided, a Promise is returned\neos.getBlock(1).then(result => {console.log(result)})\n\n// Parameters can be sequential or an object\neos.getBlock({block_num_or_id: 1}).then(result => console.log(result))\n\n// Callbacks are similar\ncallback = (err, res) => {err ? console.error(err) : console.log(res)}\neos.getBlock(1, callback)\neos.getBlock({block_num_or_id: 1}, callback)\n\n// Provide an empty object or a callback if an API call has no arguments\neos.getInfo({}).then(result => {console.log(result)})\n\n```\n\nAPI methods and documentation are generated from:\n* [chain.json](https://github.com/EOSIO/eosjs-json/blob/master/api/v1/chain.json)\n* [account_history.json](https://github.com/EOSIO/eosjs-json/blob/master/api/v1/account_history.json)\n\n### Configuration\n\n```js\nEos = require('eosjs') // Eos = require('./src')\n\n// Optional configuration..\nconfig = {\n  keyProvider: ['PrivateKeys...'], // WIF string or array of keys..\n  httpEndpoint: 'http://127.0.0.1:8888',\n  mockTransactions: () => 'pass', // or 'fail'\n  transactionHeaders: (expireInSeconds, callback) => {\n    callback(null/*error*/, headers)\n  },\n  expireInSeconds: 60,\n  broadcast: true,\n  debug: false,\n  sign: true\n}\n\neos = Eos.Localnet(config)\n```\n\n* `mockTransactions` (optional)\n  * `pass` - do not broadcast, always pretend that the transaction worked\n  * `fail` - do not broadcast, pretend the transaction failed\n  * `null|undefined` - broadcast as usual\n\n* `transactionHeaders` (optional) - manually calculate transaction header.  This\n  may be provided so eosjs does not need to make header related API calls to\n  eosd.  This callback is called for every transaction.\n  Headers are documented here [eosjs-api#headers](https://github.com/EOSIO/eosjs-api/blob/HEAD/docs/index.md#headers--object).\n\n### Options\n\nOptions may be provided immediately after parameters.\n\nExample: `eos.transfer(params, options)`\n\n```js\noptions = {\n  broadcast: true,\n  sign: true,\n  authorization: null\n}\n```\n\n* **authorization** `{array<auth>|auth}` - identifies the\n  signing account and permission typically in a multi-sig\n  configuration.  Authorization may be a string formatted as\n  `account@permission` or an `object<{actor: account, permission}>`.\n  * If missing default authorizations will be calculated.\n  * If provided additional authorizations will not be added.\n  * Sorting is always performed (by account name).\n\n### Usage (read/write)\n\nIf you use the Testnet, you'll need to replace the private key in keyProvider.\n\n```javascript\nEos = require('eosjs') // Eos = require('./src')\n\neos = Eos.Localnet({keyProvider: '5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3'})\n\n// Run with no arguments to print usage.\neos.transfer()\n\n// Usage with options (options are always optional)\noptions = {broadcast: false}\neos.transfer({from: 'inita', to: 'initb', quantity: '1 EOS', memo: ''}, options)\n\n// Object or ordered args may be used.\neos.transfer('inita', 'initb', '2 EOS', 'memo', options)\n\n// A broadcast boolean may be provided as a shortcut for {broadcast: false}\neos.transfer('inita', 'initb', '1 EOS', '', false)\n```\n\nRead-write API methods and documentation are generated from the [eosio](https://github.com/EOSIO/eosjs-json/blob/master/schema/eosio.json) schema.\n\nFor more advanced signing, see `keyProvider` in\n[eosjs-keygen](https://www.npmjs.com/package/eosjs-keygen) or\n[unit test](https://github.com/EOSIO/eosjs/blob/master/src/index.test.js).\n\n### Shorthand\n\nShorthand is available for some types such as Asset and Authority.\n\nFor example:\n* deposit: `'1 EOS'` is shorthand for `1.0000 EOS`\n* owner: `'EOS6MRy..'` is shorthand for `{threshold: 1, keys: [key: 'EOS6MRy..', weight: 1]}`\n* recovery: `inita` or `inita@active` is shorthand\n  * `{{threshold: 1, accounts: [..actor: inita, permission: active, weight: 1]}}`\n  * `inita@other` would replace the permission `active` with `other`\n\n\n```javascript\nEos = require('eosjs') // Eos = require('./src')\n\ninitaPrivate = '5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3'\ninitaPublic = 'EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV'\nkeyProvider = initaPrivate\n\neos = Eos.Localnet({keyProvider})\n\neos.newaccount({\n  creator: 'inita',\n  name: 'mynewacct',\n  owner: initaPublic,\n  active: initaPublic,\n  recovery: 'inita'\n})\n\n```\n\n### Contract\n\nDeploy a smart contract.\n\nThe `setcode` command accepts WASM text and converts this to binary before\nsigning and broadcasting.  For this, the Binaryen library is used.  Because\nthis is a large library it is not included in `eosjs` by default.\n\nAdd binaryen to your project:\n```bash\nnpm i binaryen\n```\n\nImport and include the library when you configure Eos:\n\n```javascript\nbinaryen = require('binaryen')\neos = Eos.Testnet({..., binaryen})\n```\n\nComplete example:\n\n```javascript\nEos = require('eosjs') // Eos = require('./src')\nlet {ecc} = Eos.modules\n\ninitaPrivate = '5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3'\n\n// New deterministic key for the currency account.  Only use a simple\n// seedPrivate in production if you want to give away money.\ncurrencyPrivate = ecc.seedPrivate('currency')\ncurrencyPublic = ecc.privateToPublic(currencyPrivate)\n\nkeyProvider = [initaPrivate, currencyPrivate]\n\n//  Requires a large library, separate from the eosjs bundle\n// $ npm install binaryen\nbinaryen = require('binaryen')\n\neos = Eos.Localnet({keyProvider, binaryen})\n\neos.newaccount({\n  creator: 'inita',\n  name: 'currency',\n  owner: currencyPublic,\n  active: currencyPublic,\n  recovery: 'inita'\n})\n\ncontractDir = `${process.env.HOME}/eosio/dawn3/build/contracts/currency`\nwast = fs.readFileSync(`${contractDir}/currency.wast`)\nabi = fs.readFileSync(`${contractDir}/currency.abi`)\n\n// Publish contract to the blockchain\neos.setcode('currency', 0, 0, wast)\neos.setabi('currency', JSON.parse(abi))\n\ncurrency = null\n// eos.contract(account<string>, [options], [callback])\neos.contract('currency').then(contract => currency = contract)\n\n// Issue is one of the actions in currency.abi\ncurrency.issue('inita', '1000.0000 CUR', {authorization: 'currency'})\n\n```\n\n### Atomic Operations\n\nBlockchain level atomic operations.  All will pass or fail.\n\n```javascript\nEos = require('eosjs') // Eos = require('./src')\n\nkeyProvider = [\n  '5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3',\n  Eos.modules.ecc.seedPrivate('currency')\n]\n\neos = Eos.Localnet({keyProvider})\n\n// if either transfer fails, both will fail (1 transaction, 2 messages)\neos.transaction(eos =>\n  {\n    eos.transfer('inita', 'initb', '1 EOS', '')\n    eos.transfer('inita', 'initc', '1 EOS', '')\n    // Returning a promise is optional (but handled as expected)\n  }\n  // [options],\n  // [callback]\n)\n\n// transaction on a single contract\neos.transaction('currency', currency => {\n  currency.transfer('inita', 'initb', '1 CUR', '')\n})\n\n// mix contracts in the same transaction\neos.transaction(['currency', 'eosio'], ({currency, eosio}) => {\n  currency.transfer('inita', 'initb', '1 CUR', '')\n  eosio.transfer('inita', 'initb', '1 EOS', '')\n})\n\n// contract lookups then transactions\neos.contract('currency').then(currency => {\n  currency.transaction(cur => {\n    cur.transfer('inita', 'initb', '1 CUR', '')\n    cur.transfer('initb', 'initc', '1 CUR', '')\n  })\n  currency.transfer('inita', 'initb', '1 CUR', '')\n})\n\n// Note, the contract method does not take an array.  Just use Await or yield\n// if multiple contracts are needed outside of a transaction.\n\n```\n\n### Usage (manual)\n\nA manual transaction provides for more flexibility.\n\n```javascript\nEos = require('eosjs') // Eos = require('./src')\n\neos = Eos.Localnet({keyProvider: '5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3'})\n\n// returns Promise\neos.transaction({\n  actions: [\n    {\n      account: 'eosio',\n      name: 'transfer',\n      authorization: [{\n        actor: 'inita',\n        permission: 'active'\n      }],\n      data: {\n        from: 'inita',\n        to: 'initb',\n        quantity: '7 EOS',\n        memo: ''\n      }\n    }\n  ]\n})\n\n```\n\n# Development\n\nFrom time-to-time the eosjs and eosd binary format will change between releases\nso you may need to start `eosd` with the `--skip-transaction-signatures` parameter\nto get your transactions to pass.\n\nNote, `package.json` has a \"main\" pointing to `./lib`.  The `./lib` folder is for\nes2015 code built in a separate step.  If your changing and testing code,\nimport from `./src` instead.\n\n```javascript\nEos = require('./src')\n\n// Creating the instance `eos` means that common blockchain data-structures are\n// available for a given network (Testnet, Mainnet, etc).\neos = Eos.Localnet()\n```\n\n* Fcbuffer\n\nThe `eos` instance can provide more convenient serialization:\n\n```javascript\n// 'nonce' is a struct but could be any type or struct like: uint8 or transaction\nnonce = {value: '..'}\nnonceBuffer = eos.fc.toBuffer('nonce', nonce)\nassert.deepEqual(nonce, eos.fc.fromBuffer('nonce', nonceBuffer))\n\n// Serialization for a smart-contract's Abi:\neos.contract('currency', (error, c) => currency = c)\nissue = {to: 'inita', quantity: '1.0000 CUR', memo: 'memo'}\nissueBuffer = currency.fc.toBuffer('issue', issue)\nassert.deepEqual(issue, currency.fc.fromBuffer('issue', issueBuffer))\n```\n\nUse Node v8+ to `package-lock.json`.\n\n# Related Libraries\n\nThese libraries are exported from `eosjs` or may be used separately.\n\n```javascript\nvar {api, ecc, json, Fcbuffer, format} = Eos.modules\n```\n* format [./format.md](./docs/format.md)\n  * Blockchain name validation\n  * Asset string formatting\n\n* eosjs-api [[Github](https://github.com/eosio/eosjs-api), [NPM](https://www.npmjs.org/package/eosjs-api)]\n  * Remote API to an EOS blockchain node (eosd)\n  * Use this library directly if you need read-only access to the blockchain\n    (don't need to sign transactions).\n\n* eosjs-ecc [[Github](https://github.com/eosio/eosjs-ecc), [NPM](https://www.npmjs.org/package/eosjs-ecc)]\n  * Private Key, Public Key, Signature, AES, Encryption / Decryption\n  * Validate public or private keys\n  * Encrypt or decrypt with EOS compatible checksums\n  * Calculate a shared secret\n\n* eosjs-json [[Github](https://github.com/eosio/eosjs-json), [NPM](https://www.npmjs.org/package/eosjs-json)]\n  * Blockchain definitions (api method names, blockchain operations, etc)\n  * Maybe used by any language that can parse json\n  * Kept up-to-date\n\n* eosjs-keygen [[Github](https://github.com/eosio/eosjs-keygen), [NPM](https://www.npmjs.org/package/eosjs-keygen)]\n  * private key storage and key management\n\n* Fcbuffer [[Github](https://github.com/eosio/eosjs-fcbuffer), [NPM](https://www.npmjs.org/package/fcbuffer)]\n  * Binary serialization used by the blockchain\n  * Clients sign the binary form of the transaction\n  * Essential so the client knows what it is signing\n\n\n# Browser\n\n```bash\ngit clone https://github.com/EOSIO/eosjs.git\ncd eosjs\nnpm install\nnpm run build_browser\n# builds: ./dist/eos.js\n```\n\n```html\n<script src=\"eos.js\"></script>\n<script>\nvar eos = Eos.Testnet()\n//...\n</script>\n```\n\n# Environment\n\nNode 6+ and browser (browserify, webpack, etc)\n\nReact Native should work, create an issue if you find a bug.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/EOSIO/eosjs.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "build_browser": "npm run build && mkdir -p dist && browserify -o dist/eos.js -s Eos lib/index.js",
    "build_browser_test": "npm run build && mkdir -p dist && browserify -o dist/test.js lib/*.test.js",
    "coverage": "nyc --reporter=html npm test",
    "coveralls": "npm run coverage && cat ./coverage/lcov.info | ./node_modules/.bin/coveralls",
    "docs": "jsdoc2md src/format.js > docs/index.md",
    "prepublishOnly": "npm run build_browser && npm run test_lib && npm run docs",
    "test": "mocha --use_strict src/*.test.js",
    "test_lib": "mocha --use_strict lib/*.test.js"
  },
  "version": "8.0.1"
}
